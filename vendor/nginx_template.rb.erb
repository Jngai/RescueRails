upstream <%= application %>_app_server {
    server unix:<%= unicorn_socket %> fail_timeout=0;
}

# www 301 redirect action
server {
  listen 80;
  server_name www.ophrescue.org;
  rewrite ^/(.*) http://ophrescue.org/$1 permanent;
}


# <%= application %> Server
server {
    listen                  80;
    listen                  443 spdy ssl;
    client_max_body_size    500M;
    server_name             ophrescue.org;

    # ~2 seconds is often enough for most folks to parse HTML/CSS and
    # retrieve needed images/icons/frames, connections are cheap in
    # nginx so increasing this is generally safe...
    keepalive_timeout 5;

    # path for static files
    root <%= deploy_to %>/current/public;
    access_log <%= deploy_to %>/current/log/nginx.access.log;
    error_log  <%= deploy_to %>/current/log/nginx.error.log;

    # this rewrites all the requests to the maintenance.html
    # page if it exists in the doc root. This is for capistrano's
    # disable web task

    if (-f $document_root/system/maintenance.html) {
      return 503;
    }

    error_page 503 @maintenance;
    location @maintenance {
      rewrite  ^(.*)$  /system/maintenance.html last;
      break;
    }

    location ~ ^/assets/ {
      expires 1y;
      add_header Cache-Control public;
     
      # Some browsers still send conditional-GET requests if there's a
      # Last-Modified header or an ETag header even if they haven't
      # reached the expiry date sent in the Expires header.
      add_header Last-Modified "";
      add_header ETag "";
      break;
    }

    location / {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;

      # If the file exists as a static file serve it directly without
      # running all the other rewite tests on it
      if (-f $request_filename) {
        break;
      }

      # check for index.html for directory index
      # if its there on the filesystem then rewite
      # the url to add /index.html to the end of it
      # and then break to send it to the next config rules.
      if (-f $request_filename/index.html) {
        rewrite (.*) $1/index.html break;
      }

      # this is the meat of the rails page caching config
      # it adds .html to the end of the url and then checks
      # the filesystem for that file. If it exists, then we
      # rewite the url to have explicit .html on the end
      # and then send it on its way to the next config rule.
      # if there is no file on the fs then it sets all the
      # necessary headers and proxies to our upstream mongrels
      if (-f $request_filename.html) {
        rewrite (.*) $1.html break;
      }

      if (!-f $request_filename) {
        proxy_pass http://<%= application %>_app_server;
        break;
      }
    }

    # Rails error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root <%= deploy_to %>/current/public;
    }
    
    #Rails 404 page
    error_page 404 /404.html;
    location = /404.html {
        root <%= deploy_to %>/current/public;
    }
}