<%= render 'comments_modal' %>
<div class="row">

  <div class='container' id='manager-view'>
    <div class="row">
      <%= form_tag dogs_path, :method => 'get', class: 'form-inline' do %>
        <%= text_field_tag :search, params[:search], placeholder: 'ID, Name or Microchip' %>
        <%= submit_tag "Search", class: "btn btn-sm btn-primary", id: "search_button"%>
        <%= link_to ' Clear Search', :controller => "dogs", :status => "active" %>
      <% end %>
    </div>

    <div class="row">
      <div class='col' id='all_filter_params' style="height:24px"></div>
    </div>

    <div class="row" id="filter_controls">
    </div>

    <%- if @dogs.any? %>
      <%= will_paginate(@dogs, :renderer => WillPaginate::ActionView::Bootstrap4LinkRenderer) %>
      <%= render :partial => "manager_dog", :collection => @dogs, :as => :dog %>
      <%= will_paginate(@dogs, :renderer => WillPaginate::ActionView::Bootstrap4LinkRenderer) %>
    <% else %>
      <h3>No Records Found</h3>
    <% end %>
  </div>
</div>

<script type='text/javascript'>
  function SortFilterMessageBar(options) {
    this.$globalMessageField = $('#'+options.globalMessageField);
    this.filter_params = window.filter_params

    this.make_message_group_label = function(group_id, group_text){
      span_id = `${group_id}_group`
      this.$globalMessageField.prepend($(`<span class='message_group ${span_id}'></span>`));
      this.$globalMessageField.find(`.message_group.${span_id}`).append($(`<span class='group_label ${span_id}'>${group_text}: </span>`).hide());
    };

    this.make_message = function(group_id, group_text, id, text){
      span_id = `${group_id}_group`
      this.$globalMessageField.find(`.message_group.${span_id}`).append($(`<span class='filter_param' id=${id}>${text}</span>`).hide());
    };

    this.make_message_group = function(id, buttonText,selectOptions){
      this.make_message_group_label(id, buttonText)
      for(var key in selectOptions){
          this.make_message(id, buttonText, key, selectOptions[key])
        }
    };

    this.messages = function(selectedValue, selected, multiple){
      var $selectedMessage = this.$globalMessageField.find(`#${selectedValue}`);
      var $messageGroup = $selectedMessage.closest('.message_group');
      if(!multiple){$messageGroup.find('.filter_param').hide()};
      if(selected){
        $messageGroup.find('.group_label').show();
        $selectedMessage.show();
      }else{
        $selectedMessage.hide();
        if($messageGroup.find('.filter_param:visible').length == 0) {
           $messageGroup.find('.group_label').hide();
        }
      }
      this.show_reset_link()
    };

    this.search_sort_filter_active = function(){
      for(var filter_group in this.filter_params){
        if ( (this.filter_params[filter_group].length > 0) || (this.filter_params[filter_group] != ["tracking_id"]) ){
          return true
        }
      }
      return false
    };

    this.show_reset_link = function(){
      if(this.search_sort_filter_active()){
        $('#reset_message').show()
      }else{
        $('#reset_message').hide()
      }
    };

    this.initialize = function(){
      this.$globalMessageField.append( '<span id="reset_message"><i class="fa fa-times" aria-hidden="true"></i> Reset filter, search and sort</span>');
    }
    this.initialize();
  };

  function GlobalMultiSelect(options) {

    this.filter_params = window.filter_params = {}
    this.message_bar = new SortFilterMessageBar(options)
    this.$container = $('#'+options.container);
    this.sort_param = ""
    this.templates = function(){
    return {wrapper: `<div class="col-sm globalselect-container"></div>`,
            button:  `<button type="button" class="globalselect dropdown-toggle btn btn-sm btn-default" data-toggle="dropdown" aria-expanded="true">Age</button>`,
            ul: `<ul class="dropdown-menu" x-placement="bottom-start" style="position: absolute; transform: translate3d(0px, 38px, 0px); top: 0px; left: 0px; will-change: transform; min-width: max-content; padding-right: 8px"></ul>`,
            li: `<li><span class='check fa fa-check'></span><span></span></li>`,
            breed_field: `<div class='col-sm'><%= text_field_tag :is_breed, params[:is_breed], placeholder: 'Breed (all/part)' %></div>`,
      }
    }

    this.addDropdown = function (options){
      var $id = '#'+options.id
      var templates = this.templates()
      var $wrapper = $(templates.wrapper).attr('id',options.id)
      this.$container.prepend($wrapper)
      $wrapper.append(templates.button);
      $('.globalselect',$id).text(options.buttonText);
      $('.globalselect',$id).after(templates.ul);
      this.message_bar.make_message_group(options.id, options.buttonText,options.selectOptions)
      this.filter_params[options.id] = []
      for(var key in options.selectOptions){
          this.addDropdownItem($id, key, options.selectOptions[key])
        }
      this.activate($wrapper,options.multiple);
    };

    this.addDropdownItem = function($id, value, text){
      var templates = this.templates()
      var list_item = $(templates.li)
      list_item.attr('id',value).find('span:last-child').text(text)
      $('ul',$id).append(list_item)
    };

    this.activate = function(dropdown, multiple){
      var context = this
      dropdown.find('span').on('click', {context:context, multiple:multiple}, this.select);
      $('.dropdown-menu li').on('click',function(event){event.stopPropagation()})
    };


    this.select = function(event){
        var $target = $(event.target);
        var $li = $target.parent();
        var selected = $li.toggleClass('selected').hasClass('selected');
        var multiple = event.data.multiple;
        var context = event.data.context;
        var group = $li.closest('.globalselect-container').attr('id')
        var selectedValue = $li.attr('id');
        var filter_params_group = context.filter_params[group]
        if(selected && !multiple){
          // remove the selected class from all the other list items
          $li.parent().find('li').each(function(i,el){if(el!=$li[0]){$(el).removeClass('selected')}})
          filter_params_group = [selectedValue]
        };
        if(multiple){
          if(selected){
            filter_params_group[filter_params_group.length] = selectedValue
          }else{
            filter_params_group.splice(filter_params_group.indexOf(selectedValue),1)
          }
        }
        context.message_bar.messages(selectedValue, selected, multiple);
        context.fetch(); // trigger ajax request on any change
    };

    this.filter_query = function(){
      var base = "utf8=âœ“";
      var groups = [];
      $('.globalselect-container').each(
        function(i,j){
          l = groups.length
          groups[l] = $(j).attr('id')
        }
      )
      for(var group of groups){
        $(`.globalselect-container#${group} .selected`).
          each(function(i, list_item){
                 base=base+`&${group}[]=${$(list_item).attr('id')}`
                }
              )
      }
      return base
    };

    this.fetch = function(){
      $('#manager-view').load("/dogs #manager-view", this.filter_query(), this.handle_ajax_response )
    };

    this.handle_ajax_response = function(){console.log("we did it")};

    this.initialize = function(){
      var templates = this.templates()
      this.addDropdown({id:"sort", buttonText:"Sort", selectOptions:<%= Sortable::SORT_FIELDS.to_json.html_safe %>, multiple:false})
      this.$container.prepend(templates.breed_field);
    }
    this.initialize()
  };

  $( function(){
    globalMultiSelect = new GlobalMultiSelect({container: 'filter_controls', globalMessageField: 'all_filter_params'})
    globalMultiSelect.addDropdown({id:"has_flags", buttonText:"Flags", selectOptions:<%= Dog::FILTER_FLAGS.to_id_and_value_hash %>,multiple:true})
    globalMultiSelect.addDropdown({id:"is_size", buttonText:"Size", selectOptions:<%= Dog::SIZES.to_id_and_value_hash %>, multiple:true})
    globalMultiSelect.addDropdown({id:"is_status", buttonText:"Status", selectOptions:<%= Dog::STATUSES.to_id_and_value_hash %>, multiple:true})
    globalMultiSelect.addDropdown({id:"is_age", buttonText:"Age", selectOptions:<%= Dog::AGES.to_id_and_value_hash %>, multiple:true})
  });
</script>
<script>
  $('#comments_modal').on('show.bs.modal', function (e) {
    comment = $(e.relatedTarget).data('comment')
    $('#comments_modal .modal-body').text(comment)
    name = $(e.relatedTarget).data('dog_name')
    $('#comments_modal #modal-title').text("Most recent comment for "+name)
  })
</script>
